# Example written in yaml (toml and json are also acceptable)

# The package identifier used by the OS. This must be unique amongst all other known packages
id: hello-world 
 # A human readable service title
title: "Hello World"
# Service version - accepts up to four digits, where the last confirms to revisions necessary for EmbassyOS - see documentation: https://github.com/Start9Labs/emver-rs. This value will change with each release of the service. 
version: 1.0.0.1
# Release notes for the update - can be a string, paragraph or URL
release-notes: "Revamped for EmabssyOS 0.3.3"
# The type of license for the project. Include the LICENSE in the root of the project directory. A license is required for a Start9 package.
license: mit
# The Start9 wrapper repository URL for the package. This repo contains the manifest file (this), any scripts necessary for configuration, backups, actions, or health checks (more below). This key must exist. But could be embedded into the source repository. 
wrapper-repo: "https://github.com/Start9Labs/hello-world-wrapper"
# The original project repository URL. There is no upstream repo in this example
upstream-repo: "https://github.com/Start9Labs/hello-world"
# URL to the support site / channel for the project. This key can be omitted if none exists, or it can link to the original project repository issues.
support-site: "https://docs.start9.com/"
# URL to the marketing site for the project. This key can be omitted if none exists, or it can link to the original project repository. 
marketing-site: "https://start9.com/"
# The series of commands to build the project into an s9pk for arm64/v8. In this case we are using a Makefile with the simple build command "make".
build: ["make"]
# Human readable descriptors for the service. These are used throughout the EmbassyOS user interface, primarily in the marketplace.
description:
  # This is the first description visible to the user in the marketplace.
  short: Example service
  # This description will display with additional details in the service's individual marketplace page
  long: |
    Hello World is a bare-bones service that launches a web interface to say "Hello World", and nothing more.
# These assets are static files necessary for packaging the service for Start9 (into an s9pk). Each value is a path to the specified asset. If an asset is missing from this list, or otherwise denoted, it will be defaulted to the values denoted below. 
assets:
  # Default = LICENSE.md
  license: LICENSE
  # Default = icon.png (.svg allowed)
  icon: icon.png
  # Default = INSTRUCTIONS.md
  instructions: instructions.md
  # Default = image.tar
  # docker-images: image.tar
# ----- This section commented out until we support long-running containers -----
# The main action for initializing the service. This can be script to utilize the eOS scripting apis, or docker.
# main: 
#   type: script
# # Defines the containers needed to run the main and mounted volumes
# containers:
#   main:
#     # Identifier for the main image volume, which will be used when other actions need to mount to this volume.
#     image: main
#     # Specifies where to mount the data volume(s), if there are any. Mounts for pointer dependency volumes are also denoted here. These are necessary if data needs to be read from / written to these volumes. 
#     mounts:
#       # Specifies where on the service's file system its persistence directory should be mounted prior to service startup
#       main: /root
# ----- END commented section -----
main:
  # Docker is currently the only action implementation
  type: docker
  # Identifier for the main image volume, which will be used when other actions need to mount to this volume.
  image: main
  # The executable binary for starting the initialization action. For docker actions, this is typically a "docker_entrypoint.sh" file. See the Dockerfile and the docker_entrypoint.sh in this project for additional details.
  entrypoint: "docker_entrypoint.sh"
  # Any arguments that should be passed into the entrypoint executable 
  args: []
  # Specifies where to mount the data volume(s), if there are any. Mounts for pointer dependency volumes are also denoted here. These are necessary if data needs to be read from / written to these volumes. 
  mounts:
    # Specifies where on the service's file system its persistence directory should be mounted prior to service startup
    main: /root
# This is where health checks would be defined - see a more advanced example in https://github.com/Start9Labs/embassy-pages-wrapper
health-checks: {}
config: ~
properties: ~
#  type: script
# This denotes any data, asset, or pointer volumes that should be connected when the "docker run" command is invoked
volumes:
  # This is the image where files from the project asset directory will go
  main:
    type: data
# This specifies how to configure the port mapping for exposing the service over TOR and LAN (if applicable). Many interfaces can be specified depending on the needs of the service. If it can be launched over a Local Area Network connection, specify a `lan-config`. Otherwise, at minimum, a `tor-config` must be specified.
interfaces:
  # This key is the internal name that the OS will use to configure the interface
  main:
    # A human readable name for display in the UI
    name: User Interface
    # A descriptive description of what the interface does
    description: A simple user interface that is expected to display the text "Hello Word"
    tor-config:
    # Port mappings are from the external port to the internal container port
      port-mapping:
        80: "80"
    # Port mappings are from the external port to the internal container port
    lan-config:
      443:
        ssl: true
        internal: 80
    # Denotes if the service has a user interface to display
    ui: true
    # Denotes the protocol specifications used by this interface
    protocols:
      - tcp
      - http
dependencies: {}
# Specifies how backups should be run for this service. The default EmbassyOS provided option is to use the duplicity backup library on a system image (compat)
backup:
  create:
    # Currently, only docker actions are supported.
    type: docker
    # The docker image to use. In this case, a pre-loaded system image called compat
    image: compat
    # Required if the action uses a system image. The default value is false. 
    system: true 
    # The executable to run the command to begin the backup create process
    entrypoint: compat 
    # Arguments to pass into the entrypoint executable. In this example, the full command run will be: `compat duplicity hello-world /mnt/backup /root/data`
    args:
      - duplicity
      - create
      - /mnt/backup
      # For duplicity, the backup mount point needs to be something other than `/root`, so we default to `/root/data`
      - /root/data
    mounts:
      # BACKUP is the default volume that is used for backups. This is whatever backup drive is mounted to the device, or a network filesystem.  
      # The value here donates where the mount point will be. The backup drive is mounted to this location.
      BACKUP: "/mnt/backup" 
      main: "/root/data"
  # The action to execute the backup restore functionality. Details for the keys below are the same as above.
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: "/mnt/backup"
      main: "/root/data"
migrations:
  from:
    "*":
      type: script
      args: ["from"]
  to:
    "*":
      type: script
      args: ["to"]
