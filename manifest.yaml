# v0.3.0 and up Manifest example written in .yaml (.toml and .json are also acceptable)

# The package identifier used by the OS
id: hello-world 
 # A human readable service title
title: "Hello World"
# Service version - accepts up to four digits, where the last confirms to revisions necessary for EmbassyOS - see documentation: https://github.com/Start9Labs/emver-rs
version: 0.3.0
# Release notes for the update - can be a string, paragraph or URL
release-notes: "Upgrade to EmbassyOS v0.3.0"
# The type of license for the project. Include the LICENSE in the root of the project directory. A license is required for a Start9 package.
license: mit
# The Start9 wrapper repository URL for the package. This repo contains the manifest file (this), any scripts necessary for configuration, backups, actions, or health checks (more below). This key must exist. But could be embedded into the source repository. 
wrapper-repo: "https://github.com/Start9Labs/hello-world-wrapper"
# The original project repository URL. There is no upstream repo in this example
upstream-repo: "https://github.com/Start9Labs/hello-world-wrapper"
# URL to the support site / channel for the project. This key can be omitted if none exists, or it can link to the original project repository issues.
support-site: "https://docs.start9.com/"
# URL to the marketing site for the project. This key can be omitted if none exists, or it can link to the original project repository. 
marketing-site: "https://start9.com/"
# The series of commands to build the project into an s9pk for arm64/v8. In this case we are using a Makefile with the simple build command "make".
build: ["make"]
# Minimum required version of EmbassyOS
min-os-version: "0.3.0"
# Human readable descriptors for the service. These are used throughout the EmbassyOS user interface, primarily in the marketplace.
description:
  # This is the first description visible to the user in the marketplace.
  short: Example service
  # This description will display with additional details in the service's individual marketplace page
  long: |
    Hello World is a simple example of a service wrapper that launches a web interface to say hello and nothing more.
# These assets are static files necessary for packaging the service for Start9 (into an s9pk). Each value is a path to the specified asset. If an asset is missing from this list, or otherwise denoted, it will be defaulted to the values denoted below. 
assets:
  # Default = LICENSE.md
  license: LICENSE
  # Default = icon.png
  icon: icon.png
  # Default = INSTRUCTIONS.md
  instructions: docs/instructions.md
  # Default = image.tar
  docker-images: image.tar
# The main action for initializing the service. Currently, the only type of action available is docker.
main:
  # Docker is currently the only action implementation
  type: docker
  # Identifier for the main image volume, which will be used when other actions need to mount to this volume.
  image: main
  # The executable binary for starting the initialization action. For docker actions, this is typically a "docker_entrypoint.sh" file. See the Dockerfile and the docker_entrypoint.sh in this project for additional details.
  entrypoint: "docker_entrypoint.sh"
  # Any arguments that should be passed into the entrypoint executable 
  args: []
  # Specifies where to put mount the data volume(s), if there are any. Mounts for pointer dependency volumes are also denoted here. These are necessary if data needs to be read from / written to these volumes. 
  mounts:
    main: /root
# Health checks 
# if system = true is not included, it is assumed to be system = false - only needed if using a system image to run health check, which will not be the case if inject = true
# inject = true - when using the main image for the health check, typically the case, faster as do not need to spin up an additional docker container
health-checks: {} # Health check config would go here
config: ~ # Configuration options, none for hello-world, but see below example for format:
#    get:
#     type: docker
#     image: compat
#     entrypoint: compat
#     args: 
#       - "config"
#       - "get"
#       - "/root/.hello-world/start9/config.yaml"
#       - "/mnt/assets/config_spec.yaml"
#     mounts:
#       compat: "/mnt/assets"
#       main: "/root"
#     io-format: yaml
#   set:
#     type: docker
#     image: compat
#     entrypoint: compat
#     args:
#       - "config"
#       - "set"
#       - "/root/.hello-world/start9/config.yaml"
#     mounts:
#       main: "/root"
#     io-format: yaml
dependencies: {} # Service pre-requisites, none for hello-world, but see below example (which would make BTC Proxy a dependency) for format:
  # btc-rpc-proxy:
  #   version: ">=0.3.2.1 <0.4.0"
  #   recommended: true
  #   critical: false
  #   optional: Can alternatively configure an external bitcoin node.
  #   description: Used to fetch validated blocks.
  #   config:
  #     check: 
  #       type: docker
  #       image: compat
  #       system: true
  #       # the compat image will contain a tool to check the config rules against the specified dependency
  #       entrypoint: compat
  #       args:
  #         - "dependency"
  #         - "check"
  #         - "/mnt/assets/btc-rpc-proxy.rules.yaml"
  #       mounts:
  #         compat: "/mnt/assets"  
  #     auto-configure:
  #       type: docker
  #       image: compat
  #       # if true, the denoted image is prebuilt and comes stock with EOS
  #       # uncommon: if you want something not prebuilt with EOS, you can bundle multiple docker images into the `image.tar` during the `make` build process
  #       system: true
  #       entrypoint: compat
  #       args:
  #         - "dependency"
  #         - "auto-configure"
  #         - "/mnt/assets/btc-rpc-proxy.rules.yaml"
  #       mounts:
  #         compat: "/mnt/assets"  
volumes: # this is the image where data will go from 0.2.x
  main:
    type: data # this is the image where files from the project asset directory will go
  compat:
    type: assets # this is a pointer volume, where the image is specified in `<pointer-id>.volume-id` and the mount point is specificed in `main.mounts.<pointer-id>`
interfaces:
  main:
    name: Network Interface
    description: Specifies the interface to listen on for HTTP connections.
    tor-config:
      port-mapping:
        80: "80"
    lan-config:
      80:
        ssl: false
        mapping: 80
    ui: true
    protocols:
      - tcp
      - http
alerts: {}
# for duplicity - backup mount point needs to be something other than `/root` - we default to `/root/data`
backup:
  create:
    type: docker
    image: compat # default backup process of the compat docker image is duplicity - EOS will have access to the image defined here
    system: true 
    entrypoint: compat # command to run the backup executable, in this case, duplicity
    args: # arguments to pass into the entrypoint, in this case duplicity - in this example, the full command run will be: `duplicity hello-world file:///mnt/backup /root`
      - duplicity
      - hello-world
      - /mnt/backup
      - /root
    mounts:
      # BACKUP is the default volume that is used for backups.  This is whatever backup drive is mounted to the defice, or a network filesystem.  
      # The value here donates where the data mount point will be.  Backup drive is mounted to this location, which contains previous backups.
      BACKUP: "/mnt/backup" 
      main: "/root"
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - hello-world
      - /root
      - /mnt/backup
    mounts:
      # See above comments under `backup: -> mounts:`
      BACKUP: "/mnt/backup"
      main: "/root"
actions: {} # Commands that can be issued from the UI.  None for hello-world, but see below example (resetting a root user) for format:
  # reset-root-user:
  #   name: Reset Root User
  #   description: Resets your root user (the first user) to username "admin" and a random password; restores any lost admin privileges.
  #   warning: This will invalidate existing sessions and password managers if you have them set up.
  #   allowed-statuses:
  #     - stopped
  #   implementation:
  #     type: docker
  #     image: main
  #     system: true
  #     entrypoint: docker_entrypoint.sh
  #     args: ["reset-root-user"]
  #     mounts:
  #       main: "/root"

########################################################################################################################

# compat: v0
# id: hello-world
# version: 0.2.0
# title: hello-world
# description:
#   short: "A simple, minimal project to serve as a template for creating an app for the Embassy."
#   long: "Hello World is a simple, minimal project to serve as a template for creating an app for the Embassy."
# release-notes: Initial release.

# # Alerts: omitting these will result in using the default alerts in EmbassyOS, except for start, which has no default.
# install-alert: This is an alert that will present before the user installs this service
# uninstall-alert: This is an alert that will present before the user uninstalls this service
# restore-alert: This is an alert that will present before the user restores this service from Embassy backup
# start-alert: This is an alert that will present before the user starts this service

# # Denotes whether this service has an instructions page. If this is true, it will pack in `instructions.md` in the same
# # directory as this manifest.yaml
# has-instructions: true

# # Denotes the version required and recommended
# # Required means that the package will not install if unsatisfied
# # Recommended means that the package will not be listed by the registry to instances of EmbassyOS that do not satisfy it
# os-version-required: ">=0.3.0"
# os-version-recommended: ">=0.3.0"

# # Port mappings from tor ports to the container port
# ports:
#   - internal: 3000
#     tor: 3000
#     # if lan is custom, it will proxy HTTP traffic from the specified lan port to the internal port
#     lan:
#       custom:
#         port: 80
#   - internal: 3001
#     tor: 3001
#     # if lan is standard, it will proxy HTTP traffic from 443 to the internal port
#     lan: standard
#   - internal: 3002
#     tor: 3002
#     # if lan is null it will disable access over the local area network
#     lan: ~

# # Do not change this
# image:
#   type: tar

# # specifies where on the service's file system its persistence directory should be mounted prior to service startup
# mount: /root

# # Directory you would like to expose to dependent services, specified relative to the root of the persistence directory.
# # This will be a read-only filesystem for the dependent service
# public: public

# # Directory you would like to expose to dependent services, specified relative to the root of the persistence directory.
# # This will be a read-write filesystem for the dependent service
# shared: shared

# # Hidden Service version you would like to use for your services .onion url. Allowed options are "v2" and "v3"
# hidden-service-version: v3

# # This is a key value map specifying dependency services that you need to be able to function
# # The keys are the service id's on which you depend.
# # NOTE: if you are developing a standalone service, you may delete this entire stanza
# dependencies: {}
# #   hello-world-dep:
# #     # The version range that is acceptable for this dependency
# #     version: ^0.1.0
# #     # if `optional` is omitted, the dependency is required, otherwise it will display this string to explain why the
# #     # dependency is optional
# #     optional: This dependency is optional because of this reason
# #     # Description of the dependency relationship
# #     decription: hello-world uses hello-world-dep to demo dependencies
# #     # If set to true it will mount the public directory of the dependency to $mount/start9/public/$dependencyId
# #     mount-public: true
# #     # If set to true it will mount the shared directory of the dependency to $mount/start9/shared/$dependencyId
# #     mount-public: true
# #     # This is a list of rules that levies requirements on the configuration of the dependency and suggests ways to
# #     # remedy any incompatibilities. Documentation of this feature is outside the scope of this example config.
# #     config: []
